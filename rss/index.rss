<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="//purl.org/dc/elements/1.1/" xmlns:content="//purl.org/rss/1.0/modules/content/" xmlns:atom="//www.w3.org/2005/Atom" version="2.0" xmlns:media="//search.yahoo.com/mrss/"><channel><title><![CDATA[Youssef Medaghri-Alaoui]]></title><description><![CDATA[Thoughts, stories and ideas on Software CraftmanShip, Devops & Agility.]]></description><link>https://ymedaghri.github.io/</link><image><url>https://ymedaghri.github.io/favicon.png</url><title>Youssef Medaghri-Alaoui</title><link>https://ymedaghri.github.io/</link></image><generator>Ghost 1.6</generator><lastBuildDate>Wed, 20 Dec 2017 20:24:36 GMT</lastBuildDate><atom:link href="https://ymedaghri.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[A Code Kata for discovering TDD, DDD, SpringBoot ... and Microservices]]></title><description><![CDATA[<div class="kg-card-markdown"><p>There are a lot of ressources about <strong>TDD, BDD, DDD, SpringBoot, Microservices</strong>, be it on books, blogs or conference videos ect.</p>
<p>In this article I'd like to make you discover a <strong>very simple coding kata implemented in JAVA</strong>, going from a very basic DDD architecture to a more evolved architecure,</p></div>]]></description><link>https://ymedaghri.github.io/a-code-kata-for-discovering-tdd-ddd-springboot-and-microservices/</link><guid isPermaLink="false">599be0572b4d9d4b8fdde758</guid><dc:creator><![CDATA[Youssef MEDAGHRI-ALAOUI]]></dc:creator><pubDate>Tue, 22 Aug 2017 17:49:38 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>There are a lot of ressources about <strong>TDD, BDD, DDD, SpringBoot, Microservices</strong>, be it on books, blogs or conference videos ect.</p>
<p>In this article I'd like to make you discover a <strong>very simple coding kata implemented in JAVA</strong>, going from a very basic DDD architecture to a more evolved architecure, namely <strong>Microservices</strong>.</p>
<p>Doing so, I'll have the opportunity to present you some of the related concepts based on some real coding.</p>
<h1 id="thebankaccountcodingkata">The bank account coding kata</h1>
<p>The bank account coding kata is a quite simple.<br>
There are several business operations you can do using it :</p>
<ul>
<li>Deposit into Account</li>
<li>Withdraw from an Account</li>
<li>Print a bank statement to the console</li>
</ul>
<pre><code class="language-markup">Use Cases:

US 1:
-----
In order to save money
As a bank client
I want to make a deposit in my account
 
US 2:
-----
In order to retrieve some or all of my savings
As a bank client
I want to make a withdrawal from my account

US 3:
-----
In order to check my operations
As a bank client
I want to see the history (operation, date, amount, balance)  of my operations
</code></pre>
<h2 id="firstimplementationaconsoleapplicationintdd">First Implementation - A Console Application in TDD</h2>
<p>The code of the console application is available <a href="https://github.com/ymedaghri/bankaccountkata.git">here (git master branch)</a>.<br>
It is a <em>Gradle</em> project written in <em>JAVA 8</em> and not using any library or framework other than <em>JUnit</em> or <em>Mockito</em>.<br>
We will be refering to it during the first part of this article.</p>
<h2 id="howdoiproceedwithtdd">How do I proceed with TDD ?</h2>
<p>Having worked on several monolithic JAVA applications, I have met many time the <a href="https://dzone.com/articles/how-break-vicious-cycle">vicious cycle of technical debt</a>.</p>
<blockquote>
<p>It is important to <em>emphasize</em> <strong>all</strong> the studies without exception show a correlation between the use of TDD, an increase in the number of test cases produced, and corresponding improvements such as a decline in the number of defects.<br>
<strong>This is sufficient for TDD to be recommended as a developer practice.</strong></p>
</blockquote>
<p>First, I begin to write an acceptance test that correspond to one requirement I need to implement.</p>
<script src="https://gist.github.com/woprzech/968547fbc9de2ee2ddff9dd2534813b8.js"></script>
<pre><code class="language-java">/* AcceptanceTests.java */

public static final Long ACCOUNT_ID = 1234567l;

 @Test
    public void should_create_an_account_if_it_does_not_exist() {
        AccountRepository accountRepository = new InMemoryAccountRepository();
        Account account = accountRepository.findAccountByID(AccountId.from(ACCOUNT_ID));
        assertNull(account);
        account = new Account(AccountId.from(ACCOUNT_ID));
        accountRepository.save(account);
        Account accountFound = accountRepository.findAccountByID(AccountId.from(ACCOUNT_ID));
        assertThat(accountFound, Is.is(account));
    }
</code></pre>
<p>I write them first before adding any line of code<br>
Here is the way I personnaly use TDD :</p>
<ul>
<li>The first step for me is to write Acceptance Tests to implement the feature (Red --&gt; Green --&gt; Refactor)</li>
<li>Then Depending on the complexity of the classes I need to create for fullfilling each acceptance test, I first write Unit Tests for that (not systematic tough, complexity driven)</li>
</ul>
<h1 id="dddforthearchitecture">DDD for the architecture</h1>
<p>I do use TDD &amp; ATDD to code but I don't use it to define the architecture of my application.</p>
<p>For defining an architecture</p>
<p><a href="https://airbrake.io/blog/software-design/domain-driven-design">https://airbrake.io/blog/software-design/domain-driven-design</a><br>
<a href="//tidyjava.com/category/architecture/">//tidyjava.com/category/architecture/</a></p>
<h1 id="firstimplementationofthebankaccountkata">First Implementation of the BankAccount Kata</h1>
<p><a href="https://github.com/ymedaghri/bankaccountkata.git">Source from github</a></p>
</div>]]></content:encoded></item><item><title><![CDATA[Behavior Driven Development (BDD) in a few words]]></title><description><![CDATA[<div class="kg-card-markdown"><p>BDD (Behavior Driven Development) is primarily a conceptual approach also knows as <strong>Specification by Example</strong>.<br>
It is a <strong>Collaboration Technic</strong> where all the actors of the team meet together in a meeting called <strong>“The 3 Amigos”</strong> to design stories related to a feature in the form of acceptance scenarios.</p>
<div class="cinta dos">
  <img src="https://ymedaghri.github.io/content/images/2017/08/3-amigos-mario-luigi-yoschi.png">
</div>
<br>
<h1 id="amigos">Amigos.</h1></div>]]></description><link>https://ymedaghri.github.io/bdd-in-a-few-words/</link><guid isPermaLink="false">599b1b9b2e0d1b435afe3efb</guid><dc:creator><![CDATA[Youssef MEDAGHRI-ALAOUI]]></dc:creator><pubDate>Mon, 21 Aug 2017 17:44:05 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>BDD (Behavior Driven Development) is primarily a conceptual approach also knows as <strong>Specification by Example</strong>.<br>
It is a <strong>Collaboration Technic</strong> where all the actors of the team meet together in a meeting called <strong>“The 3 Amigos”</strong> to design stories related to a feature in the form of acceptance scenarios.</p>
<div class="cinta dos">
  <img src="https://ymedaghri.github.io/content/images/2017/08/3-amigos-mario-luigi-yoschi.png">
</div>
<br>
<h1 id="amigos">Amigos...</h1>
<p>The name <strong>3 Amigos</strong> refers to the fact that the 3 parts that constitutes the Team (Developers, Testers, PO &amp; BusinessAnalysts) are working together collaboratively during this meeting.<br>
During the <strong>“The 3 Amigos”</strong> meeting, conversations take place between the business analyst (or PO), the developer, and the tester.<br>
Doing so, they elaborate the requirements together.</p>
<h1 id="thegoldenruleofbdd">The Golden rule of BDD</h1>
<blockquote>
<p>Having conversations<br>
Is more important than capturing conversations<br>
Is more important than automating conversations</p>
</blockquote>
<p>At the end of the <strong>3 Amigos</strong> meeting the team has a set of <strong>acceptance criteria</strong>, but <strong>the most important aspect of this approach</strong> is that at this point they have <strong>the same understanding</strong> of all the requirements they have been discussing about.</p>
<h1 id="bddisasynthesisandrefinementoftddatdd">BDD is a synthesis and refinement of TDD &amp; ATDD</h1>
<p>The output of the <strong>3 Amigos</strong> meeting is a set of <strong>acceptance scenarios</strong> corresponding to the requirements that contributes directly to precise business outcomes.</p>
<p>These acceptance scenarios will guide implementing the described requirements such as in the TDD approach (Test Driven Development)</p>
<p>The acceptance scenarios describes behaviors in a single notation directly accessible to any role in the Team (Given/When/Then Canvas).<br>
These are very well suited to work in relation with <strong>Cucumber</strong> automation testing tool.</p>
<h2 id="belowisanexampleofaverysimpleacceptancescenario">Below is an example of a very simple acceptance scenario :</h2>
<pre><code>Story: Returns go to stock
As a store owner
In order to keep track of stock
I want to add items back to stock when they're returned.


Scenario 1: Refunded items should be returned to stock
Given that a customer previously bought a black sweater from me
And I have three black sweaters in stock.
When he returns the black sweater for a refund
Then I should have four black sweaters in stock.


Scenario 2: Replaced items should be returned to stock
Given that a customer previously bought a blue garment from me
And I have two blue garments in stock
And three black garments in stock.
When he returns the blue garment for a replacement in black
Then I should have three blue garments in stock
And two black garments in stock.
</code></pre>
<p><a href="https://docs.google.com/presentation/d/1YfKNOYakp-oUfef3w-0CuGwaF4GZXZB4XuqD8V0BElM/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g35f391192_00">Want to know more, check the slides of a presentation I made on BDD ...</a></p>
<h1 id="andsomegreatressourcesonbdd">And some great ressources on BDD</h1>
<div class="cinta uno">
<iframe width="560" height="315" src="https://www.youtube.com/embed/MCaXumfckmQ" frameborder="0" allowfullscreen></iframe>
</div>
<div class="cinta uno">
<iframe width="560" height="315" src="https://www.youtube.com/embed/kTLF2G1djZw" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></content:encoded></item></channel></rss>